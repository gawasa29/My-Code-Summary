
    //Âü∫Êú¨ÊßãÊñá„ÅØ${vscode„ÅåË®≠ÂÆö„Åó„ÅüÂ§âÊï∞/Ê≠£Ë¶èË°®Áèæ„ÅßÊ§úÁ¥¢/Ê§úÁ¥¢„Åó„ÅüÂÄ§„ÇíÁΩÆ„ÅçÊèõ„Åà„Çã/Ê≠£Ë¶èË°®Áèæ„Ç™„Éó„Ç∑„Éß„É≥}
    //${TM_FILENAME_BASE/_controller//}„ÅØ„ÄÇ${ÁèæÂú®„ÅÆ„Éâ„Ç≠„É•„É°„É≥„Éà„ÅÆ„Éï„Ç°„Ç§„É´Âêç„ÇíÊã°ÂºµÂ≠ê„Å™„Åó„Åß/_controller„ÇíÊ§úÁ¥¢/ÂâäÈô§/}


	{
		"Button": {
			"prefix": "sni button",
			"body": [
				"ElevatedButton(",
				"  onPressed: () {$1},",
				"  child: const Text('Button'),",
				"),"
			],
			"description": "Button"
		},
		"Navigator push": {
			"prefix": "sni navigator push",
			"body": ["Navigator.push(context, MaterialPageRoute(builder: (context) => $1));"],
			"description": ""
		},
		"Navigator pushAndRemoveUntil": {
			"prefix": "sni navigator pushAndRemoveUntil",
			"body": ["Navigator.pushAndRemoveUntil(context, MaterialPageRoute(builder: (context) => $1), (Route<dynamic> route) => false);"],
			"description": ""
		},
		"Navigator pop": {
			"prefix": "sni navigator pop",
			"body": ["Navigator.pop(context);"],
			"description": ""
		},
		"Scaffold": {
			"prefix": "sni scaffold",
			"body": [
				"return Scaffold(",
				"  appBar: AppBar(),",
				"  body: Column(",
				"    children: [ Text('Hello World!'),],",
				"  ),",
				");"
			],
			"description": "Scaffold"
		},
		"Expanded": {
			"prefix": "sni expanded",
			"body": ["Expanded(child: Container(color: Colors.red)),",],
			"description": ""
		},
		"FutureBuilder": {
		  "prefix": "sni futureBuilder",
		  "body": [
			"FutureBuilder(",
			"        future: Future.value(),",
			"        builder: (context, snapshot) {",
			"          if (snapshot.connectionState != ConnectionState.done) {",
			"            return const Center(child: CircularProgressIndicator());",
			"          }",
			"",
			"          if (snapshot.hasError) {",
			"            return Text('Error: ${snapshot.error}');",
			"          }",
			"",
			"          if (!snapshot.hasData) {",
			"            return const Text('No Data');",
			"          }",
			"",
			"          final test = snapshot.data!;",
			"          return const Text('Data: test');",
			"        },",
			"      )"
		  ],
		  "description": ""
		},
		"StreamBuilder": {
		  "prefix": "sni streamBuilder",
		  "body": [
			"StreamBuilder(",
			"                stream: Stream.value(null),",
			"                builder: (context, snapshot) {",
			"                  if (snapshot.connectionState != ConnectionState.active) {",
			"                    return const Center(child: CircularProgressIndicator());",
			"                  }",
			"",
			"                  if (snapshot.hasError) {",
			"                    return Text('Error: ${snapshot.error}');",
			"                  }",
			"",
			"                  if (!snapshot.hasData) {",
			"                    return const Text('No Project');",
			"                  }",
			"",
			"                  final test = snapshot.data;",
			"                  return const Text('Data: test');",
			"                },",
			"              )"
		  ],
		  "description": "StreamBuilder"
		},
		"Theme": {
		  "prefix": "sni theme",
		  "body": [
			"final theme = Theme.of(context);",
			"final colors = theme.colorScheme;",
			"final typography = theme.textTheme;"
		  ],
		  "description": "Theme"
		},
		"Try catch": {
			"prefix": "sni try catch",
			"body": [
				"try {",
				"$1",
				"} catch (e) {",
				"print('${TM_FILENAME} üî¥${TM_LINE_NUMBER}: $$e');",
				"await toast(e);",
				"}"
			],
			"description": "sni try catch"
		},
		"New page": {
			"prefix": "sni new page",
			"body": [
				"import 'package:flutter/material.dart';",
				"",
				"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} extends StatelessWidget {",
				"  const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}({super.key});",
				"",
				"  @override",
				"  Widget build(BuildContext context) {",
				"    print('üì± build ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} ');",
				"    return Container($1);",
				"  }",
				"}"
			],
			"description": "New page"
		},
		"New class": {
			"prefix": "sni new class",
			"body": ["class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} {}",],
			"description": "New class"
		},
		"New service": {
			"prefix": "sni new service",
			"body": [
				"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} {",
				"  Future<void> _function() async {print('üõú _function ');}",
				"  Future<void> createCommand() async {print('üéÆ createCommand ');}",
				"  Future<void> readQuery() async {print('üîç readQuery ');}",
				"  Future<void> updateCommand() async {print('üéÆ updateCommand ');}",
				"  Future<void> deleteCommand() async {print('üéÆ deleteCommand ');}",
				"}"
			],
			"description": "New service"
		},
		"New model": {
			"prefix": "sni new model",
			"body": [
				"import 'package:flutter/material.dart';",
				"@immutable",
				"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} {",
				"  const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}({",
				"    required this.test,",
				"  });",
				"  factory ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}.fromJson(Map<String, dynamic> json) {",
				"    return ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}(",
				"      test: json['test'] as String,",
				"    );",
				"  }",
				"  final String test;",
				"  Map<String, dynamic> toJson() => {",
				"    'test': test,",
				"  };",
				"}"
			],
			"description": "New model"
		},
		"Riverpod When": {
		  "prefix": "sni riverpod when",
		  "body": [
			"when(",
			"          error: (error, stackTrace) => Text('Error $$error'),",
			"          loading: () => const Center(child: CircularProgressIndicator()),",
			"          data: (data) {",
			"            return Text(data.toString());",
			"          })"
		  ],
		  "description": "Riverpod When"
		},
		"Riverpod Repository": {
		  "prefix": "sni riverpod repository",
		  "body": [
			"import 'package:riverpod_annotation/riverpod_annotation.dart';",
			"",
			"part '$TM_FILENAME_BASE.g.dart';",
			"",
			"@riverpod",
			" ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}  ${TM_FILENAME_BASE/(.*)/${1:/camelCase}/g}(Ref ref) =>",
			"     ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}(FirebaseFirestore.instance);",
			"",
			"class  ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} {",
			"  ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}(this._firestore);",
			"  final FirebaseFirestore _firestore;",
			"",
			"  static String ${TM_FILENAME_BASE/_repository//}sPath({required String userId}) => 'users/$userId/';",
			"",
			"  CollectionReference<Model> _${TM_FILENAME_BASE/_repository//}sRef({",
			"    required String userId,",
			"  }) =>",
			"      _firestore.collection(${TM_FILENAME_BASE/_repository//}sPath(userId)).withConverter(",
			"            fromFirestore: (snapshot, _) =>",
			"                Model.fromJson(snapshot.data()!),",
			"            toFirestore: (data, _) => data.toJson(),",
			"          );",
			"",
			"  DocumentReference<Model> _${TM_FILENAME_BASE/_repository//}DocRef({",
			"    required String userId,",
			"    required String ${TM_FILENAME_BASE/_repository//}Name,",
			"  }) =>",
			"      _${TM_FILENAME_BASE/_repository//}sRef(userId: userId).doc(${TM_FILENAME_BASE/_repository//}Name);",
			"",
			"  Future<void> create() async {",
			"    print('üéÆ create ');",
			"  }",
			"",
			"  Future<void> read() async {",
			"    print('üîç read ');",
			"  }",
			"",
			"  Future<void> update() async {",
			"    print('üéÆ update ');",
			"  }",
			"",
			"  Future<void> delete() async {",
			"    print('üéÆ delete ');",
			"  }",
			"}",
			""
		  ],
		  "description": "Riverpod Repository"
		},
		"StateÁî®Freezed": {
		  "prefix": [
			  "sni freezed state",
		  ],
		  "body": [
			  "import 'package:freezed_annotation/freezed_annotation.dart';",
			  "",
			  "part '$TM_FILENAME_BASE.freezed.dart';",
			  "",
			  "@freezed",
			  "class ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}} with _$${1} {",
			  "  const factory ${1}({",
			  "    required ${2:String id},",
			  "  }) = _${1};",
			  "}"
		  ],
		  "description": "Freezed State"
	  },
	  "JsonÁî®Freezed": {
		  "prefix": [
			  "sni freezed json",
		  ],
		  "body": [
			  "import 'package:freezed_annotation/freezed_annotation.dart';",
			  "",
			  "part '$TM_FILENAME_BASE.freezed.dart';",
			  "part '$TM_FILENAME_BASE.g.dart';",
			  "",
			  "@freezed",
			  "class ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}} with _$${1} {",
			  "  const factory ${1}({",
			  "@Default('„Åì„Åì„Å´ÂàùÊúüÂÄ§„ÇíÂÖ•„Çå„Çå„Çã') String name,",
			  "    required ${2:String id},",
			  "  }) = _${1};",
			  "  ",
			  "  factory ${1}.fromJson(Map<String, Object?> json) => _$${1}FromJson(json);",
			  "}"
		  ],
		  "description": "Freezed Json"
	  },
	  "Generated Code": {
		  "prefix": [
			  "sni generated",
		  ],
		  "body": [
			  "part '$TM_FILENAME_BASE.g.dart';",
		  ],
		  "description": "Generated Code"
	  }
	  }
	  
	  
	  
	  
	  
	  
	  